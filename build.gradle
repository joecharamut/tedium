plugins {
	id 'fabric-loom' version '0.6-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}

	maven {
		name = "java-generator-functions"
		url = "https://dl.bintray.com/filipmalczak/maven"
	}

	maven {
		url = "https://maven.shedaniel.me/"
	}

	maven {
		url = "https://maven.terraformersmc.com/"
	}
}

dependencies {
	implementation include(group: "io.herrmann", name: "java-generator-functions", version: "1.0")
	implementation include(group: "org.nanohttpd", name: "nanohttpd", version: "2.3.1")
	implementation include(group: "org.javassist", name: "javassist", version: "3.27.0-GA")
	implementation include(group: "org.mozilla", name: "rhino", version: "1.7.13")

	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricApi_version}"

	// https://github.com/CottonMC/LibGui
	modImplementation include("io.github.cottonmc:LibGui:${project.libGui_version}")

	modImplementation "com.terraformersmc:modmenu:${project.modMenu_version}"

	// https://github.com/shedaniel/cloth-config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.clothConfig_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

minecraft {
	accessWidener = file("src/main/resources/tedium.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}
